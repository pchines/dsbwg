#!/usr/bin/perl -w

use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use NHGRI::Db::Connector;
use GTB::File qw(Open);
use GTB::File::Iter;
use GTB::Run qw(human_readable);
use MIME::Lite;
our %Opt;
our $Dbc;
our $VERSION = '0.1';
our $KILO = 1024;
our $EMPTY = q{};
our $SPACE = q{ };
our $COMMA = q{,};
our @Isilons = qw(bo centaur ketu spock wyvern);
our @Divs = qw(totals home.totals);
our @Month = qw(January February March April May June
        July August September October November December);

=head1 NAME

isilon_personal_report - email user a report of their space usage

=head1 SYNOPSIS

Generate a storage usage report from current and previous summaries:

  isilon_personal_report -u pchines -curr 170310 -prev 170303

For complete documentation, run C<isilon_personal_report -man>

=head1 DESCRIPTION

Generate a storage usage report from current and previous summaries,
and, optionally, email to user.

=cut

#------------
# Begin MAIN 
#------------

process_commandline();
$Dbc = NHGRI::Db::Connector->new(-realm => $Opt{db},
        -dbi_attrib  => {
            RaiseError => 1,
            PrintError => 0,
            AutoCommit => 1,
            },
        );
my %tot;
for my $t (qw(current previous)) {
    for my $e (@Divs) {
        my $f = "$Opt{$t}/all.$Opt{$t}.$e.csv";
        $tot{$t}{$e} = read_file_into_hash($f);
    }
    $tot{$t}{details} = {};
    for my $i (@Isilons) {
        my $f = "$Opt{$t}/$i.$Opt{$t}.details.csv";
        concat_by_user($tot{$t}{details}, $f);
    }
}
my $rpt = generate_single_report($Opt{username}, \%tot);
print $rpt;
#my $rh_users = get_user_list();
#generate_user_reports($rh_users, \%tot);

#------------
# End MAIN
#------------

sub generate_single_report {
    my ($u, $rh_tot) = @_;
    my (%c,%t);
    for my $e (@Divs) {
        $t{$e} = human_readable($rh_tot->{current}{$e}{$u}{total});
        $c{$e} = pct_change($rh_tot->{previous}{$e}{$u}{total},
                $rh_tot->{current}{$e}{$u}{total});
    }
    my $cdate = as_date($Opt{current});
    my $rpt = << "END_MSG";
Hello $u,

As of $cdate, you are using a total of $t{totals} on Isilon systems at NHGRI.
This is a change of $c{totals} from the last reporting period.

You currently are using $t{'home.totals'} in home directories on these Isilon
systems ($c{'home.totals'}).

Here is a current breakdown of where your files reside:
END_MSG
    for my $rh (@{ $rh_tot->{current}{details}{$u} }) {
        $rpt .= sprintf("%10s  %s\n", human_readable($rh->{used}), $rh->{path});
    }
    $rpt .= << "END_MSG";

Have a great day!
    
[This message was automatically generated and automatically emailed by 
$Opt{from}, on behalf of the Data Storage and Backup Working Group.
You are receiving this email because you are a member of the DSBWG.]

END_MSG
    return $rpt;
}

sub pct_change {
    my ($start, $end) = @_;
    my $diff = $end - $start;
    my $pct = $start ? 100 * $diff / $start : 100;
    return ($pct >= 0 ? "+" : $EMPTY) . sprintf("%.0f%%", $pct);
}

sub as_date {
    my ($ymd) = @_;
    if ($ymd =~ /^(\d\d)(\d\d)(\d\d)$/) {
        return join($SPACE, "Friday,", $Month[$2-1], $3+0);
    }
    return $ymd;
}

sub read_file_into_hash {
    my ($file) = @_;
    my $iter = GTB::File::Iter->new( file => $file, fs => $COMMA );
    my @cols = map { s/\.\d{6}.*//; $_ } $iter->columns();
    # Danger: modifying internal state
    $iter->{cols} = \@cols;
    my %d;
    while (my $rh = $iter->next_hash) {
        $d{ $rh->{$cols[0]} } = $rh;
    }
    return \%d;
}

sub concat_by_user {
    my ($rh_user, $file) = @_;
    my $iter = GTB::File::Iter->new( file => $file, fs => $COMMA,
            cols => [qw(user path used)] );
    while (my $rh = $iter->next_hash) {
        push @{ $rh_user->{ $rh->{user} } }, $rh;
    }
}

sub get_user_list {
    return { $Opt{username} => "$Opt{username}\@mail.nih.gov" };
}

sub process_commandline {
    # Set defaults here
    %Opt = (db          => 'storage',
            from        => 'Peter Chines <pchines@mail.nih.gov>',
            );
    GetOptions(\%Opt, qw(current=s db=s from=s previous=s to=s username=s
                manual help+ version)) || pod2usage(0);
    if ($Opt{manual})  { pod2usage(verbose => 2); }
    if ($Opt{help})    { pod2usage(verbose => $Opt{help}-1); }
    if ($Opt{version}) { die "isilon_personal_report, version $VERSION\n"; }
    # If non-option arguments are required, uncomment next line
}

__END__

=head1 OPTIONS

=over 4

=item B<--current> DIR

Required.  Date of current report.

=item B<--db> realm

Database realm to use to connec to the database.  The default realm name is
"storage".  Having this realm file configured allows you to connect to the
database with your own credentials, without having to manually supply a
password every time.  See C<NHGRI::Db::Connector> for details.

=item B<--previous> DIR

=item B<--username> USER

=item B<--help|--manual>

Display documentation.  One C<--help> gives a brief synopsis, C<-h -h> shows
all options, C<--manual> provides complete documentation.

=back

=head1 AUTHOR

 Peter Chines - pchines@mail.nih.gov

=head1 LEGAL

This software/database is "United States Government Work" under the terms of
the United States Copyright Act.  It was written as part of the authors'
official duties for the United States Government and thus cannot be
copyrighted.  This software/database is freely available to the public for
use without a copyright notice.  Restrictions cannot be placed on its present
or future use. 

Although all reasonable efforts have been taken to ensure the accuracy and
reliability of the software and data, the National Human Genome Research
Institute (NHGRI) and the U.S. Government does not and cannot warrant the
performance or results that may be obtained by using this software or data.
NHGRI and the U.S.  Government disclaims all warranties as to performance,
merchantability or fitness for any particular purpose. 

In any work or product derived from this material, proper attribution of the
authors as the source of the software or data should be made, using "NHGRI
Information Technology Branch" as the citation. 

=cut
